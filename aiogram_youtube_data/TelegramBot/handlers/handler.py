from aiogram import Router, F, html
from aiogram.types import Message
from aiogram.filters import CommandStart, CommandObject, Command
from lexicon.lexicon_ru import LEXICON_RU
from service.youtubeapiclientv3 import YouTubeAPIClientV3
from models.methods import DataBase
from custom_exceptions.custom_exceptions import (
    InvalidVideoIdFormatError, 
    InvalidPlaylistIdFormatError
)



handler_router = Router()
serive = YouTubeAPIClientV3()
database = DataBase()


# Description Handlers
@handler_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.delete()
    await message.answer(
        text=LEXICON_RU['cmd_start'].format(message.from_user.username)
    )


@handler_router.message(F.text == '/help video')
async def cmd_help_video(message: Message):
    await message.delete()
    await message.answer(
        text=LEXICON_RU['cmd_help_video']
    )


@handler_router.message(F.text == '/help playlist')
async def cmd_help_playlist(message: Message):
    await message.delete()
    await message.answer(
        text=LEXICON_RU['cmd_help_playlist']
    )


@handler_router.message(F.text == '/help channel')
async def cmd_help_channel(message: Message):
    await message.delete()
    await message.answer(
        text=LEXICON_RU['cmd_help_channel']
    )


@handler_router.message(F.text == '/help export')
async def cmd_help_export(message: Message):
    await message.delete()
    await message.answer(
        text=LEXICON_RU['cmd_help_export']
    )


@handler_router.message(Command('help'))
async def cmd_help(message: Message):
    await message.delete()
    await message.answer(
        text=LEXICON_RU['cmd_help']
    )


# Handlers for receiving data
@handler_router.message(Command('video'))
async def cmd_video(message: Message, command: CommandObject):
    if command.args is None:
        await message.reply("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.")
        return
    
    try:
        video_info: dict = serive.video.get_info(command.args)
    except InvalidVideoIdFormatError as e:
        await message.reply(str(e))
        return
    
    try:
        entities = message.entities or []
        for item in entities:
            if item.type in video_info.keys():
                video_info[item.type] = item.extract_from(message.text)
        await message.reply(
            f'üìπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ\n'
            f'üîí –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞: {html.quote(str(video_info["kind"]))}\n'
            f'üîë –ú–µ—Ö–∞–Ω–∏–∑–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: {html.quote(str(video_info["etag"]))}\n'
            f'üÜî –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {html.quote(str(video_info["id"]))}\n'
            f'üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {html.quote(str(video_info["publishedAt"]))}\n'
            f'üì∫ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {html.quote(str(video_info["channelTitle"]))}\n'
            f'üë§ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞: {html.quote(str(video_info["channelId"]))}\n'
            f'üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {html.quote(str(video_info["title"]))}\n'
            f'üñºÔ∏è URL –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {html.quote(str(video_info["thumbnails_url"]))}\n'
            f'üìè –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {html.quote(str(video_info["thumbnails_width"]))}\n'
            f'üìê –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {html.quote(str(video_info["thumbnails_height"]))}\n'
            f'üè∑Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ–≥–∏: {html.quote(str(video_info["tags"]))}\n'
            f'üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–∏–¥–µ–æ YouTube: {html.quote(str(video_info["categoryId"]))}\n'
            f'üì° –ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è/–∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è: {html.quote(str(video_info["liveBroadcastContent"]))}\n'
            f'üó£Ô∏è –Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö: {html.quote(str(video_info["defaultLanguage"]))}\n'
            f'üéôÔ∏è –Ø–∑—ã–∫ –∑–≤—É–∫–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–∏: {html.quote(str(video_info["defaultAudioLanguage"]))}\n'
            f'‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {html.quote(str(video_info["duration"]))}\n'
            f'üîÑ 3D/2D: {html.quote(str(video_info["dimension"]))}\n'
            f'üéûÔ∏è –§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ: {html.quote(str(video_info["definition"]))}\n'
            f'üìù –°—É–±—Ç–∏—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã: {html.quote(str(video_info["caption"]))}\n'
            f'üîè –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {html.quote(str(video_info["licensedContent"]))}\n'
            f'üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã: {html.quote(str(video_info["regionRestriction_allowed"]))}\n'
            f'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã: {html.quote(str(video_info["regionRestriction_blocked"]))}\n'
            f'üìä –†–µ–π—Ç–∏–Ω–≥ (–ú–ö–†–§ - –†–æ—Å—Å–∏—è): {html.quote(str(video_info["contentRating"]))}\n'
            f'üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {html.quote(str(video_info["viewCount"]))}\n'
            f'üëç –õ–∞–π–∫–∏: {html.quote(str(video_info["likeCount"]))}\n'
            f'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {html.quote(str(video_info["commentCount"]))}\n'
        )
        database.save_video_info(video_info)
    except Exception as e:
        await message.reply(str(e))


@handler_router.message(Command('playlist'))
async def cmd_playlist(message: Message, command: CommandObject):
    if command.args is None:
        await message.reply("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.")
        return
    
    try:
        playlist_info: dict = serive.playlist.get_info(command.args)
    except InvalidVideoIdFormatError as e:
        await message.reply(str(e))
        return
    
    await message.reply(str(playlist_info))
    try:
        entities = message.entities or []
        for item in entities:
            if item.type in playlist_info.keys():
                playlist_info[item.type] = item.extract_from(message.text)
        await message.reply(
            f'üìπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ\n'
            f'üîí –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞: {html.quote(str(playlist_info["kind"]))}\n'
            f'üîë –ú–µ—Ö–∞–Ω–∏–∑–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: {html.quote(str(playlist_info["etag"]))}\n'
            f'üÜî –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {html.quote(str(playlist_info["id"]))}\n'
            f'üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {html.quote(str(playlist_info["publishedAt"]))}\n'
            f'üë§ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞: {html.quote(str(playlist_info["channelId"]))}\n'
            f'üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {html.quote(str(playlist_info["title"]))}\n'
            f'üñºÔ∏è URL –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {html.quote(str(playlist_info["thumbnails_url"]))}\n'
            f'üìè –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {html.quote(str(playlist_info["thumbnails_width"]))}\n'
            f'üìê –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {html.quote(str(playlist_info["thumbnails_height"]))}\n'
            f'üîè –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: {html.quote(str(playlist_info["privacyStatus"]))}\n'
            f'üëÄ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {html.quote(str(playlist_info["itemCount"]))}\n'
            f'‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç–∞: {html.quote(str(playlist_info["duration"]))}\n'
        )
    except Exception as e:
        await message.reply(str(e))
        return 

@handler_router.message(Command('channel'))
async def cmd_channel(message: Message, command: CommandObject):
    ...


@handler_router.message(Command('export'))
async def cmd_export(message: Message, command: CommandObject):
    ...